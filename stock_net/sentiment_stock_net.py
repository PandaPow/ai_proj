import numpy
import datetime

from keras.models import Sequential
from keras.layers import Dense

# data: one stock
# this is what the net should be outputting: 1 for increase, 0 for same/decrease
dataset = numpy.genfromtxt('aapl.us.txt', delimiter=',', dtype='str',skip_header=1)
stock_date = dataset[:,0]
stock_size = len(stock_date)
stock_open = dataset[:,1].astype(numpy.float)
stock_close = dataset[:,4].astype(numpy.float)
stock_direction = numpy.zeros(stock_size, dtype='int')

for i, item in enumerate(stock_direction):
    if (stock_close[i] - stock_open[i] > 0):
        stock_direction[i] = 1
    else:
        stock_direction[i] = 0

# data: S&P 500
gspc = numpy.genfromtxt('GSPC.txt', delimiter='\t', dtype='str',skip_header=1)
gspc_date = dataset[:,0]
gspc_size = len(gspc_date)
gspc_open = dataset[:,1].astype(numpy.float)
gspc_close = dataset[:,4].astype(numpy.float)
gspc_direction = numpy.zeros(gspc_size, dtype='int')

for i, item in enumerate(gspc_direction):
    if (gspc_close[i] - gspc_open[i] > 0):
        gspc_direction[i] = 1
    else:
        gspc_direction[i] = 0

# data: generated by sentiment net
inputdata = numpy.genfromtxt('fake_net2input.txt', delimiter=',', dtype='str',skip_header=1)
net1_date = inputdata[:,0]
net1_name = inputdata[:,1]
net1_sentiment = inputdata[:,2].astype(numpy.int)
net1_size = len(net1_date)

# set up arrays that will be used to train the net
numDays = len(set(net1_date))
net2_sentiment = numpy.zeros(numDays)
net2_day = numpy.zeros(numDays).astype(str)
# prev: yesterday
# prev2: day before yesterday
net2_prevDirection = numpy.zeros(numDays, dtype='int')
net2_prev2Direction = numpy.zeros(numDays, dtype='int')
net2_gspcDirection = numpy.zeros(numDays, dtype='int')
net2_result = numpy.zeros(numDays, dtype='int')

# add up sentiment 'percentage' for one day
indxNumDays = 0
for i, day in enumerate(net1_date):
    if (day != ''):
        goodTweet = 0
        badTweet = 0
        if (net1_sentiment[i]):
            goodTweet += 1
        else:
            badTweet += 1
        net1_date[i] = ''
        net1_name[i] = ''
        net1_sentiment[i] = -1

        for j, checkDay in enumerate(net1_date):
            if (i != j and day == checkDay):
                if (net1_sentiment[j]):
                    goodTweet += 1
                else:
                    badTweet += 1
                net1_date[j] = ''
                net1_name[j] = ''
                net1_sentiment[j] = -1
        totalTweets = goodTweet + badTweet
        net2_sentiment[indxNumDays] = goodTweet/totalTweets
        net2_day[indxNumDays] = day
        indxNumDays += 1

# get the stock's direction corresponding to net1's data
for i, day in enumerate(net2_day):
    if (day in stock_date):
        j = numpy.where(stock_date == day)
        net2_result[i] = stock_direction[j]
        if (j[0] > 0):
            net2_prevDirection[i] = stock_direction[j[0]-1]
            # otherwise it just stays 0
        if (j[0] > 1):
            net2_prev2Direction[i] = stock_direction[j[0]-2]
    else:
        print('Either no stock data for that date, or it was a weekend')
        net2_day = numpy.delete(net2_day, i)
        net2_sentiment = numpy.delete(net2_sentiment, i)
        net2_result = numpy.delete(net2_result, i)
        net2_prevDirection = numpy.delete(net2_prevDirection, i)
        net2_prev2Direction = numpy.delete(net2_prev2Direction, i)
        net2_gspcDirection = numpy.delete(net2_gspcDirection, i)

# get the s&p500's direction corresponding to net1's data
for i, day in enumerate(net2_day):
    if (day in gspc_date):
        j = numpy.where(gspc_date == day)
        net2_result[i] = gspc_direction[j]
        if (j[0] > 0):
            net2_gspcDirection[i] = gspc_direction[j[0]-1]
            # otherwise it just stays 0
    else:
        print('Either no stock data for that date, or it was a weekend')
        net2_day = numpy.delete(net2_day, i)
        net2_sentiment = numpy.delete(net2_sentiment, i)
        net2_result = numpy.delete(net2_result, i)
        net2_prevDirection = numpy.delete(net2_prevDirection, i)
        net2_prev2Direction = numpy.delete(net2_prev2Direction, i)
        net2_gspcDirection = numpy.delete(net2_gspcDirection, i)
    
xTrain = numpy.array([net2_sentiment, net2_prevDirection, net2_prev2Direction, net2_gspcDirection]).transpose()
yTrain = numpy.array([net2_result]).transpose()
print('NUM DAYS: ', numDays)

# FIX THIS ON A COMPUTER THAT HAS KERAS
net = Sequential()
net.add(Dense(units=5, input_shape=(4,), activation='sigmoid'))
# net.add(Dense(units=32, activation='relu'))
net.add(Dense(units=1, activation='sigmoid'))
net.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
net.fit(xTrain, yTrain, epochs=5, batch_size=2)

xTest = numpy.array([[1, 1, 1, 1], [0, 0, 0, 0], [0.9, 1, 1, 1], [0.3, 0, 0, 0]])
yTest = numpy.array([1, 0, 1, 0])

scores = net.evaluate(xTest, yTest, batch_size=2)
print("%s: %.2f%%" % (net.metrics_names[1], scores[1]*100))
